// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Topic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  content   String
  description String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  collectionIds String[] @db.ObjectId

  @@index([name(sort: Asc), content(sort: Asc), description(sort: Asc)], map: "search_text_index")
  @@map("topics")
}

// Note the collectionIds are for MongoDB, where I'm using an array of references instead of a direct relation


model Collections {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  topicIds     String[] @db.ObjectId
  publishedUrl String?
  hashnodeUrl  String?
  devToUrl     String?
  createdAt    DateTime @default(now())
  lastEdited   DateTime @updatedAt

  @@index([name(sort: Asc), description(sort: Asc)], map: "search_text_index")
  @@map("collections")
}

model PublishedContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName  String
  content   String
  createdAt DateTime @default(now())

  @@map("publishedContent")
}

model MediaItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  url       String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mediaItems")
}
model Settings {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  hashnodeToken   String?
  publicationId   String?
  lastUpdated     DateTime  @updatedAt
  
  @@map("settings")
}

model Campaign {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      String    @default("draft") // draft, active, completed, archived
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishingPlans PublishingPlan[]
  contentStaging ContentStaging[]
  manualTasks ManualTask[]

  @@map("campaigns")
}

model PublishingPlan {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  campaignId  String    @db.ObjectId
  topicId     String    @db.ObjectId
  platform    String    
  status      String    @default("scheduled") 
  scheduledFor DateTime?
  publishedAt DateTime?
  publishedUrl String?
  hashnodeUrl String?  // Add this
  devToUrl    String?  // Add this
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([campaignId, topicId, platform])
  @@map("publishingPlans")
}

model ContentStaging {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  campaignId  String    @db.ObjectId
  topicId     String    @db.ObjectId
  
  // Simple 3-state workflow: DRAFT -> READY -> SCHEDULED
  status      String    @default("draft") // draft, ready, scheduled
  
  // Platforms this content will be published to
  platforms   String[]  // e.g., ["hashnode", "devto", "medium", "linkedin"]
  
  // Scheduling
  scheduledFor DateTime?
  
  // Relationships
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([campaignId, topicId], map: "campaignId_topicId")
  @@map("contentStaging")
}

model ManualTask {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  campaignId  String    @db.ObjectId
  contentStagingId String? @db.ObjectId
  
  // Task details
  title       String
  description String?
  platform    String?   // e.g., "medium", "linkedin", "twitter"
  
  // Task management
  status      String    @default("todo") // todo, in_progress, completed
  dueDate     DateTime?
  completedAt DateTime?
  
  // Instructions and notes
  instructions String?
  notes       String?
  
  // Relationships
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("manualTasks")
}