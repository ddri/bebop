// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Bebop Content Marketing Platform Models

model Campaign {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  name        String
  description String?
  status      CampaignStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  goals       String?
  content     Content[]
  schedules   Schedule[]
  analytics   Analytics[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("campaigns")
}

model Content {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  campaignId String        @db.ObjectId
  campaign   Campaign      @relation(fields: [campaignId], references: [id])
  title      String
  body       String
  excerpt    String?
  type       ContentType
  status     ContentStatus @default(DRAFT)
  metadata   Json? // SEO, tags, custom fields
  mediaIds   String[]      @db.ObjectId
  schedules  Schedule[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("content")
}

model Schedule {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  campaignId       String             @db.ObjectId
  campaign         Campaign           @relation(fields: [campaignId], references: [id])
  contentId        String             @db.ObjectId
  content          Content            @relation(fields: [contentId], references: [id])
  destinationId    String             @db.ObjectId
  destination      Destination        @relation(fields: [destinationId], references: [id])
  publishAt        DateTime
  status           ScheduleStatus     @default(PENDING)
  publishedAt      DateTime?
  error            String?
  attempts         Int                @default(0) // Number of publish attempts
  lastAttemptAt    DateTime? // Last attempt timestamp
  platformContent  Json? // Platform-specific content adaptations
  publishedContent PublishedContent[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("schedules")
}

model Destination {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  userId           String
  name             String
  type             DestinationType
  config           Json // API keys, URLs, settings
  platformConfig   Json? // Platform-specific settings
  apiCredentials   Json? // Encrypted API keys/tokens
  platformMetadata Json? // Instance URLs, publication IDs, etc.
  isActive         Boolean            @default(true)
  schedules        Schedule[]
  publishedContent PublishedContent[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("destinations")
}

model Analytics {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId String   @db.ObjectId
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  date       DateTime
  metrics    Json // views, clicks, engagement, etc.
  createdAt  DateTime @default(now())

  @@map("analytics")
}

model Media {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  filename     String
  originalName String
  url          String
  size         Int
  type         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("media")
}

model PublishedContent {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  scheduleId       String      @db.ObjectId
  schedule         Schedule    @relation(fields: [scheduleId], references: [id])
  destinationId    String      @db.ObjectId
  destination      Destination @relation(fields: [destinationId], references: [id])
  platformPostId   String? // ID from the platform
  platformUrl      String? // URL of published content
  publishedAt      DateTime    @default(now())
  platformResponse Json? // Full response from platform
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@map("published_content")
}

// Enums
enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum ContentType {
  BLOG_POST
  EMAIL
  SOCIAL_POST
  TWITTER
  LINKEDIN
  INSTAGRAM
  FACEBOOK
  CUSTOM
}

enum ContentStatus {
  DRAFT
  READY
  PUBLISHED
  ARCHIVED
}

enum ScheduleStatus {
  PENDING
  PUBLISHING // Currently being processed
  PUBLISHED
  FAILED
  CANCELLED
}

enum DestinationType {
  // Phase 1 Platforms
  HASHNODE
  DEVTO
  BLUESKY
  MASTODON
  // Future Platforms
  WORDPRESS
  GHOST
  MAILCHIMP
  SENDGRID
  TWITTER
  LINKEDIN
  FACEBOOK
  INSTAGRAM
  WEBHOOK
  CUSTOM
}
